A1Task/CoMz.cpp:              kd_[0] * (vel_des[2] - sp_->com_vel[2]);//est_com_vel
A1Task/CoMxyz.cpp:                kd_[i] * (vel_des[i] - sp_->com_vel[i]);//est_com_vel[i]
A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, amp, freq);
A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if(sp_->b_flfoot_contact) gait_scheduler_->current_contact_state[0] = 1;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if(sp_->b_frfoot_contact) gait_scheduler_->current_contact_state[1] = 1;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if(sp_->b_rlfoot_contact) gait_scheduler_->current_contact_state[2] = 1;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if(sp_->b_rrfoot_contact) gait_scheduler_->current_contact_state[3] = 1;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    gait_scheduler_->step(sp_->curr_time);
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    mpc_pos_des_[2] = sp_->com_pos_des[2];
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    sp_->mpc_rxn_forces = mpc_planner_->ComputeContactForces(
A1CtrlArchitecture/A1CtrlArchitecture.cpp:        sp_->x_y_yaw_vel_des,// Only x,y vel used from this variable
A1CtrlArchitecture/A1CtrlArchitecture.cpp:        sp_->x_y_yaw_vel_des);// Only yaw vel used from this variable
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    myUtils::pretty_print(sp_->mpc_rxn_forces, std::cout, "MPC Reaction Forces");
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    floating_base_lifting_up_manager_->updateFloatingBaseDesired(sp_->curr_time);
A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if((sp_->curr_time >= floating_base_lifting_up_manager_->start_time_ +
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_frfoot_pos = frfoot_pos_hierarchy_manager_->current_w_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_rrfoot_pos = rrfoot_pos_hierarchy_manager_->current_w_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_flfoot_pos = flfoot_pos_hierarchy_manager_->current_w_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_rlfoot_pos = rlfoot_pos_hierarchy_manager_->current_w_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_com = com_hierarchy_manager_->current_w_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_base_ori = base_ori_hierarchy_manager_->current_w_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_frfoot_fr =
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_flfoot_fr =
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_rrfoot_fr =
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_rlfoot_fr =
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  // sp_->q_task_des = joint_trajectory_manager_->joint_pos_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  // sp_->qdot_task_des = joint_trajectory_manager_->joint_vel_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->q_task = sp_->q.tail(A1::n_adof);
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->qdot_task = sp_->qdot.tail(A1::n_adof);
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->com_pos_des = floating_base_lifting_up_manager_->com_pos_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->com_vel_des = floating_base_lifting_up_manager_->com_vel_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->base_quat_des = floating_base_lifting_up_manager_->base_ori_quat_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->base_ang_vel_des = floating_base_lifting_up_manager_->base_ang_vel_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->frfoot_pos_des = frfoot_trajectory_manager_->foot_pos_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->flfoot_pos_des = flfoot_trajectory_manager_->foot_pos_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->rrfoot_pos_des = rrfoot_trajectory_manager_->foot_pos_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->rlfoot_pos_des = rlfoot_trajectory_manager_->foot_pos_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->frfoot_vel_des = frfoot_trajectory_manager_->foot_vel_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->flfoot_vel_des = flfoot_trajectory_manager_->foot_vel_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->rrfoot_vel_des = rrfoot_trajectory_manager_->foot_vel_des_;
A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->rlfoot_vel_des = rlfoot_trajectory_manager_->foot_vel_des_;
A1StateMachine/ContactTransitionStart.cpp:  ctrl_start_time_ = sp_->curr_time;
A1StateMachine/ContactTransitionStart.cpp:  sp_->planning_id += 1;
A1StateMachine/ContactTransitionStart.cpp:  // ctrl_arch_->dcm_trajectory_manager_->updateDCMTasksDesired(sp_->curr_time);
A1StateMachine/ContactTransitionStart.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1StateMachine/ContactTransitionStart.cpp:    sp_->front_stance_foot = A1BodyNode::FR_foot;
A1StateMachine/ContactTransitionStart.cpp:    sp_->rear_stance_foot = A1BodyNode::RL_foot;
A1StateMachine/ContactTransitionStart.cpp:    sp_->front_stance_foot = A1BodyNode::FL_foot;
A1StateMachine/ContactTransitionStart.cpp:    sp_->front_stance_foot = A1BodyNode::RR_foot;
A1StateMachine/QuadSupportStand.cpp:  ctrl_start_time_ = sp_->curr_time;
A1StateMachine/QuadSupportStand.cpp:      ->initializeFloatingBaseTrajectory(sp_->curr_time, end_time_,
A1StateMachine/QuadSupportStand.cpp:      sp_->curr_time);
A1StateMachine/QuadSupportStand.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1StateMachine/QuadSupportBalance.cpp:  ctrl_start_time_ = sp_->curr_time;
A1StateMachine/QuadSupportBalance.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1StateMachine/SwingControl.cpp:  ctrl_start_time_ = sp_->curr_time; 
A1StateMachine/SwingControl.cpp:        0.0, end_time_, sp_->com_vel_des);
A1StateMachine/SwingControl.cpp:        0.0, end_time_, sp_->com_vel_des);
A1StateMachine/SwingControl.cpp:        0.0, end_time_, sp_->com_vel_des);
A1StateMachine/SwingControl.cpp:        0.0, end_time_, sp_->com_vel_des);
A1StateMachine/SwingControl.cpp:            sp_->curr_time);
A1StateMachine/SwingControl.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1StateMachine/SwingControl.cpp:                sp_->b_flfoot_contact, sp_->b_frfoot_contact,
A1StateMachine/SwingControl.cpp:                sp_->b_rlfoot_contact, sp_->b_rrfoot_contact,
A1StateMachine/SwingControl.cpp:                sp_->com_vel_des,
A1StateMachine/SwingControl.cpp:                sp_->com_pos_des[2],
A1StateMachine/SwingControl.cpp:  sp_->mpc_rxn_forces = mpc_rxn_forces;
A1StateMachine/SwingControl.cpp:        if (fabs(sp_->l_rf[5]) >= early_contact_force_threshold_) {
A1StateMachine/SwingControl.cpp:          myUtils::pretty_print(sp_->l_rf, std::cout, "Left Wrench");
A1StateMachine/SwingControl.cpp:        if (fabs(sp_->r_rf[5]) >= early_contact_force_threshold_) {
A1StateMachine/SwingControl.cpp:          myUtils::pretty_print(sp_->r_rf, std::cout, "Right Wrench");
A1StateMachine/SwingControl.cpp:// if (sp_->b_lfoot_contact == 1) {
A1StateMachine/SwingControl.cpp:// if (sp_->b_rfoot_contact == 1) {
A1StateMachine/ContactTransitionEnd.cpp:  ctrl_start_time_ = sp_->curr_time;
A1StateMachine/ContactTransitionEnd.cpp:  // ctrl_arch_->dcm_trajectory_manager_->updateDCMTasksDesired(sp_->curr_time);
A1StateMachine/ContactTransitionEnd.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1StateEstimator.cpp:  sp_->jpos_ini = curr_config_.segment(A1::n_vdof, A1::n_adof);
A1StateEstimator.cpp:  sp_->saveCurrentData();
A1StateEstimator.cpp:  sp_->frfoot_pos = robot_->getBodyNodeIsometry(A1BodyNode::FR_foot).translation();
A1StateEstimator.cpp:  sp_->flfoot_pos = robot_->getBodyNodeIsometry(A1BodyNode::FL_foot).translation(); 
A1StateEstimator.cpp:  sp_->rrfoot_pos = robot_->getBodyNodeIsometry(A1BodyNode::RR_foot).translation(); 
A1StateEstimator.cpp:  sp_->rlfoot_pos = robot_->getBodyNodeIsometry(A1BodyNode::RL_foot).translation();
A1StateEstimator.cpp:  sp_->frfoot_vel = robot_->getBodyNodeSpatialVelocity(A1BodyNode::FR_foot).tail(3);
A1StateEstimator.cpp:  sp_->flfoot_vel = robot_->getBodyNodeSpatialVelocity(A1BodyNode::FL_foot).tail(3);
A1StateEstimator.cpp:  sp_->rrfoot_vel = robot_->getBodyNodeSpatialVelocity(A1BodyNode::RR_foot).tail(3);
A1StateEstimator.cpp:  sp_->rlfoot_vel = robot_->getBodyNodeSpatialVelocity(A1BodyNode::RL_foot).tail(3);
A1StateEstimator.cpp:  sp_->saveCurrentData();
A1StateEstimator.cpp:  sp_->q = curr_config_;
A1StateEstimator.cpp:  sp_->qdot = curr_qdot_;
A1StateEstimator.cpp:  sp_->com_pos = robot_->getCoMPosition();
A1StateEstimator.cpp:  sp_->com_vel = robot_->getCoMVelocity();
A1StateEstimator.cpp:  if (data->frfoot_contact) sp_->b_frfoot_contact = 1;
A1StateEstimator.cpp:  else sp_->b_frfoot_contact = 0;
A1StateEstimator.cpp:  if (data->flfoot_contact) sp_->b_flfoot_contact = 1;
A1StateEstimator.cpp:  else sp_->b_flfoot_contact = 0;
A1StateEstimator.cpp:  if (data->rrfoot_contact) sp_->b_rrfoot_contact = 1;
A1StateEstimator.cpp:  else sp_->b_rrfoot_contact = 0;
A1StateEstimator.cpp:  if (data->rlfoot_contact) sp_->b_rlfoot_contact = 1;
A1StateEstimator.cpp:  else sp_->b_rlfoot_contact = 0;
A1Interface.cpp:  sp_->curr_time = running_time_;
A1Interface.cpp:  sp_->phase_copy = control_architecture_->getState();
