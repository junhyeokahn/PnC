ValkyriePnC/ValkyrieTrajectoryManager/UpperBodyJointTrajectoryManager.cpp:  t_start_ = sp_->curr_time;
ValkyriePnC/ValkyrieTrajectoryManager/UpperBodyJointTrajectoryManager.cpp:  pos_ini_ = sp_->q.tail(number_of_joints_);
ValkyriePnC/ValkyrieTrajectoryManager/UpperBodyJointTrajectoryManager.cpp:  vel_ini_ = sp_->qdot.tail(number_of_joints_);
ValkyriePnC/ValkyrieTrajectoryManager/UpperBodyJointTrajectoryManager.cpp:  t_start_ = sp_->curr_time;
ValkyriePnC/ValkyrieTrajectoryManager/UpperBodyJointTrajectoryManager.cpp:  pos_ini_ = sp_->q.tail(number_of_joints_);
ValkyriePnC/ValkyrieTrajectoryManager/UpperBodyJointTrajectoryManager.cpp:  vel_ini_ = sp_->qdot.tail(number_of_joints_);
ValkyriePnC/ValkyrieTrajectoryManager/UpperBodyJointTrajectoryManager.cpp:  double t_local = (sp_->curr_time - t_start_);
ValkyriePnC/ValkyrieCtrl/ValkyrieMainController.cpp:      des_jacc_, sp_->qdot.segment(Valkyrie::n_vdof, Valkyrie::n_adof),
ValkyriePnC/ValkyrieCtrl/ValkyrieMainController.cpp:      sp_->q.segment(Valkyrie::n_vdof, Valkyrie::n_adof), des_jvel_, des_jpos_);
ValkyriePnC/ValkyrieCtrl/ValkyrieMainController.cpp:  Eigen::VectorXd jpos_ini = sp_->q.segment(Valkyrie::n_vdof, Valkyrie::n_adof);
ValkyriePnC/ValkyrieInterface.cpp:  sp_->stance_foot = ValkyrieBodyNode::leftCOP_Frame;
ValkyriePnC/ValkyrieInterface.cpp:  sp_->curr_time = running_time_;
ValkyriePnC/ValkyrieInterface.cpp:  sp_->phase_copy = control_architecture_->getState();
ValkyriePnC/ValkyrieStateMachine/DoubleSupportBalance.cpp:  ctrl_start_time_ = sp_->curr_time;
ValkyriePnC/ValkyrieStateMachine/DoubleSupportBalance.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:  ctrl_start_time_ = sp_->curr_time;
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:  Eigen::VectorXd jpos_des = sp_->jpos_ini;
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:    (sp_->com_pos_des)[i] = des_com_pos_[i];
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:    (sp_->com_vel_des)[i] = des_com_vel_[i];
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:      sp_->com_pos_des + sp_->com_vel_des / dcm_omega;
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:  Eigen::VectorXd dcm_vel_des_ = sp_->com_vel_des + des_com_acc_ / dcm_omega;
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:  dcm_pos_des_[2] = sp_->com_pos_des[2];
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:  dcm_vel_des_[2] = sp_->com_vel_des[2];
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:  taf_container_->com_task_->updateDesired(sp_->com_pos_des, sp_->com_vel_des,
ValkyriePnC/ValkyrieStateMachine/DoubleSupportStand.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
ValkyriePnC/ValkyrieStateMachine/SwingControl.cpp:  ctrl_start_time_ = sp_->curr_time;
ValkyriePnC/ValkyrieStateMachine/SwingControl.cpp:  val_ctrl_arch_->dcm_trajectory_manger_->updateDCMTasksDesired(sp_->curr_time);
ValkyriePnC/ValkyrieStateMachine/SwingControl.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
ValkyriePnC/ValkyrieStateMachine/SwingControl.cpp:        if (fabs(sp_->l_rf[5]) >= early_contact_force_threshold_) {
ValkyriePnC/ValkyrieStateMachine/SwingControl.cpp:          myUtils::pretty_print(sp_->l_rf, std::cout, "Left Wrench");
ValkyriePnC/ValkyrieStateMachine/SwingControl.cpp:        if (fabs(sp_->r_rf[5]) >= early_contact_force_threshold_) {
ValkyriePnC/ValkyrieStateMachine/SwingControl.cpp:          myUtils::pretty_print(sp_->r_rf, std::cout, "Right Wrench");
ValkyriePnC/ValkyrieStateMachine/ContactTransitionEnd.cpp:  ctrl_start_time_ = sp_->curr_time;
ValkyriePnC/ValkyrieStateMachine/ContactTransitionEnd.cpp:  val_ctrl_arch_->dcm_trajectory_manger_->updateDCMTasksDesired(sp_->curr_time);
ValkyriePnC/ValkyrieStateMachine/ContactTransitionEnd.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
ValkyriePnC/ValkyrieStateMachine/ContactTransition.cpp:  ctrl_start_time_ = sp_->curr_time;
ValkyriePnC/ValkyrieStateMachine/ContactTransition.cpp:        t_walk_start, transfer_type, pelvis_ori, sp_->dcm, sp_->dcm_vel);
ValkyriePnC/ValkyrieStateMachine/ContactTransition.cpp:  val_ctrl_arch_->dcm_trajectory_manger_->updateDCMTasksDesired(sp_->curr_time);
ValkyriePnC/ValkyrieStateMachine/ContactTransition.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->jpos_ini = curr_config_.segment(Valkyrie::n_vdof, Valkyrie::n_adof);
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->saveCurrentData();
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->saveCurrentData();
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->l_rf = data->lf_wrench;
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->r_rf = data->rf_wrench;
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->q = curr_config_;
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->qdot = curr_qdot_;
ValkyriePnC/ValkyrieStateEstimator.cpp:    sp_->b_rfoot_contact = 1;
ValkyriePnC/ValkyrieStateEstimator.cpp:    sp_->b_rfoot_contact = 0;
ValkyriePnC/ValkyrieStateEstimator.cpp:    sp_->b_lfoot_contact = 1;
ValkyriePnC/ValkyrieStateEstimator.cpp:    sp_->b_lfoot_contact = 0;
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->com_pos = robot_->getCoMPosition();
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->com_vel = robot_->getCoMVelocity();
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->dcm_omega = sqrt(9.81 / sp_->com_pos[2]);
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->prev_dcm = sp_->dcm;
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->dcm = robot_->getCoMPosition() + sp_->com_vel / sp_->dcm_omega;
ValkyriePnC/ValkyrieStateEstimator.cpp:  sp_->dcm_vel =
ValkyriePnC/ValkyrieStateEstimator.cpp:      alpha_vel * ((sp_->dcm - sp_->prev_dcm) / ValkyrieAux::servo_rate) +
ValkyriePnC/ValkyrieStateEstimator.cpp:      (1.0 - alpha_vel) * sp_->dcm_vel;
ValkyriePnC/ValkyrieTask/DCMTask.cpp:  Eigen::VectorXd r_ic = sp_->dcm.head(2);
ValkyriePnC/ValkyrieTask/DCMTask.cpp:  op_cmd.head(2) = (9.81 / _pos_des[2]) * (sp_->com_pos.head(2) - r_cmp_des);
ValkyriePnC/ValkyrieTask/DCMTask.cpp:  op_cmd[2] = kp_[2] * (_pos_des[2] - sp_->com_pos[2]) +
ValkyriePnC/ValkyrieTask/DCMTask.cpp:              kd_[2] * (_vel_des[2] - sp_->com_vel[2]);
A1PnC/A1Task/CoMz.cpp:              kd_[0] * (vel_des[2] - sp_->com_vel[2]);//est_com_vel
A1PnC/A1Task/CoMxyz.cpp:                kd_[i] * (vel_des[i] - sp_->com_vel[i]);//est_com_vel[i]
A1PnC/A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, amp, freq);
A1PnC/A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
A1PnC/A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
A1PnC/A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
A1PnC/A1LogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if(sp_->b_flfoot_contact) gait_scheduler_->current_contact_state[0] = 1;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if(sp_->b_frfoot_contact) gait_scheduler_->current_contact_state[1] = 1;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if(sp_->b_rlfoot_contact) gait_scheduler_->current_contact_state[2] = 1;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if(sp_->b_rrfoot_contact) gait_scheduler_->current_contact_state[3] = 1;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    gait_scheduler_->step(sp_->curr_time);
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    mpc_pos_des_[2] = sp_->com_pos_des[2];
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    sp_->mpc_rxn_forces = mpc_planner_->ComputeContactForces(
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:        sp_->x_y_yaw_vel_des,// Only x,y vel used from this variable
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:        sp_->x_y_yaw_vel_des);// Only yaw vel used from this variable
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    myUtils::pretty_print(sp_->mpc_rxn_forces, std::cout, "MPC Reaction Forces");
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    floating_base_lifting_up_manager_->updateFloatingBaseDesired(sp_->curr_time);
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:    if((sp_->curr_time >= floating_base_lifting_up_manager_->start_time_ +
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_frfoot_pos = frfoot_pos_hierarchy_manager_->current_w_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_rrfoot_pos = rrfoot_pos_hierarchy_manager_->current_w_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_flfoot_pos = flfoot_pos_hierarchy_manager_->current_w_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_rlfoot_pos = rlfoot_pos_hierarchy_manager_->current_w_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_com = com_hierarchy_manager_->current_w_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_base_ori = base_ori_hierarchy_manager_->current_w_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_frfoot_fr =
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_flfoot_fr =
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_rrfoot_fr =
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->w_rlfoot_fr =
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  // sp_->q_task_des = joint_trajectory_manager_->joint_pos_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  // sp_->qdot_task_des = joint_trajectory_manager_->joint_vel_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->q_task = sp_->q.tail(A1::n_adof);
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->qdot_task = sp_->qdot.tail(A1::n_adof);
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->com_pos_des = floating_base_lifting_up_manager_->com_pos_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->com_vel_des = floating_base_lifting_up_manager_->com_vel_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->base_quat_des = floating_base_lifting_up_manager_->base_ori_quat_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->base_ang_vel_des = floating_base_lifting_up_manager_->base_ang_vel_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->frfoot_pos_des = frfoot_trajectory_manager_->foot_pos_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->flfoot_pos_des = flfoot_trajectory_manager_->foot_pos_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->rrfoot_pos_des = rrfoot_trajectory_manager_->foot_pos_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->rlfoot_pos_des = rlfoot_trajectory_manager_->foot_pos_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->frfoot_vel_des = frfoot_trajectory_manager_->foot_vel_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->flfoot_vel_des = flfoot_trajectory_manager_->foot_vel_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->rrfoot_vel_des = rrfoot_trajectory_manager_->foot_vel_des_;
A1PnC/A1CtrlArchitecture/A1CtrlArchitecture.cpp:  sp_->rlfoot_vel_des = rlfoot_trajectory_manager_->foot_vel_des_;
A1PnC/A1StateMachine/ContactTransitionStart.cpp:  ctrl_start_time_ = sp_->curr_time;
A1PnC/A1StateMachine/ContactTransitionStart.cpp:  sp_->planning_id += 1;
A1PnC/A1StateMachine/ContactTransitionStart.cpp:  // ctrl_arch_->dcm_trajectory_manager_->updateDCMTasksDesired(sp_->curr_time);
A1PnC/A1StateMachine/ContactTransitionStart.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1PnC/A1StateMachine/ContactTransitionStart.cpp:    sp_->front_stance_foot = A1BodyNode::FR_foot;
A1PnC/A1StateMachine/ContactTransitionStart.cpp:    sp_->rear_stance_foot = A1BodyNode::RL_foot;
A1PnC/A1StateMachine/ContactTransitionStart.cpp:    sp_->front_stance_foot = A1BodyNode::FL_foot;
A1PnC/A1StateMachine/ContactTransitionStart.cpp:    sp_->front_stance_foot = A1BodyNode::RR_foot;
A1PnC/A1StateMachine/QuadSupportStand.cpp:  ctrl_start_time_ = sp_->curr_time;
A1PnC/A1StateMachine/QuadSupportStand.cpp:      ->initializeFloatingBaseTrajectory(sp_->curr_time, end_time_,
A1PnC/A1StateMachine/QuadSupportStand.cpp:      sp_->curr_time);
A1PnC/A1StateMachine/QuadSupportStand.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1PnC/A1StateMachine/QuadSupportBalance.cpp:  ctrl_start_time_ = sp_->curr_time;
A1PnC/A1StateMachine/QuadSupportBalance.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1PnC/A1StateMachine/SwingControl.cpp:  ctrl_start_time_ = sp_->curr_time; 
A1PnC/A1StateMachine/SwingControl.cpp:        0.0, end_time_, sp_->com_vel_des);
A1PnC/A1StateMachine/SwingControl.cpp:        0.0, end_time_, sp_->com_vel_des);
A1PnC/A1StateMachine/SwingControl.cpp:        0.0, end_time_, sp_->com_vel_des);
A1PnC/A1StateMachine/SwingControl.cpp:        0.0, end_time_, sp_->com_vel_des);
A1PnC/A1StateMachine/SwingControl.cpp:            sp_->curr_time);
A1PnC/A1StateMachine/SwingControl.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1PnC/A1StateMachine/SwingControl.cpp:                sp_->b_flfoot_contact, sp_->b_frfoot_contact,
A1PnC/A1StateMachine/SwingControl.cpp:                sp_->b_rlfoot_contact, sp_->b_rrfoot_contact,
A1PnC/A1StateMachine/SwingControl.cpp:                sp_->com_vel_des,
A1PnC/A1StateMachine/SwingControl.cpp:                sp_->com_pos_des[2],
A1PnC/A1StateMachine/SwingControl.cpp:  sp_->mpc_rxn_forces = mpc_rxn_forces;
A1PnC/A1StateMachine/SwingControl.cpp:        if (fabs(sp_->l_rf[5]) >= early_contact_force_threshold_) {
A1PnC/A1StateMachine/SwingControl.cpp:          myUtils::pretty_print(sp_->l_rf, std::cout, "Left Wrench");
A1PnC/A1StateMachine/SwingControl.cpp:        if (fabs(sp_->r_rf[5]) >= early_contact_force_threshold_) {
A1PnC/A1StateMachine/SwingControl.cpp:          myUtils::pretty_print(sp_->r_rf, std::cout, "Right Wrench");
A1PnC/A1StateMachine/SwingControl.cpp:// if (sp_->b_lfoot_contact == 1) {
A1PnC/A1StateMachine/SwingControl.cpp:// if (sp_->b_rfoot_contact == 1) {
A1PnC/A1StateMachine/ContactTransitionEnd.cpp:  ctrl_start_time_ = sp_->curr_time;
A1PnC/A1StateMachine/ContactTransitionEnd.cpp:  // ctrl_arch_->dcm_trajectory_manager_->updateDCMTasksDesired(sp_->curr_time);
A1PnC/A1StateMachine/ContactTransitionEnd.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
A1PnC/A1StateEstimator.cpp:  sp_->jpos_ini = curr_config_.segment(A1::n_vdof, A1::n_adof);
A1PnC/A1StateEstimator.cpp:  sp_->saveCurrentData();
A1PnC/A1StateEstimator.cpp:  sp_->frfoot_pos = robot_->getBodyNodeIsometry(A1BodyNode::FR_foot).translation();
A1PnC/A1StateEstimator.cpp:  sp_->flfoot_pos = robot_->getBodyNodeIsometry(A1BodyNode::FL_foot).translation(); 
A1PnC/A1StateEstimator.cpp:  sp_->rrfoot_pos = robot_->getBodyNodeIsometry(A1BodyNode::RR_foot).translation(); 
A1PnC/A1StateEstimator.cpp:  sp_->rlfoot_pos = robot_->getBodyNodeIsometry(A1BodyNode::RL_foot).translation();
A1PnC/A1StateEstimator.cpp:  sp_->frfoot_vel = robot_->getBodyNodeSpatialVelocity(A1BodyNode::FR_foot).tail(3);
A1PnC/A1StateEstimator.cpp:  sp_->flfoot_vel = robot_->getBodyNodeSpatialVelocity(A1BodyNode::FL_foot).tail(3);
A1PnC/A1StateEstimator.cpp:  sp_->rrfoot_vel = robot_->getBodyNodeSpatialVelocity(A1BodyNode::RR_foot).tail(3);
A1PnC/A1StateEstimator.cpp:  sp_->rlfoot_vel = robot_->getBodyNodeSpatialVelocity(A1BodyNode::RL_foot).tail(3);
A1PnC/A1StateEstimator.cpp:  sp_->saveCurrentData();
A1PnC/A1StateEstimator.cpp:  sp_->q = curr_config_;
A1PnC/A1StateEstimator.cpp:  sp_->qdot = curr_qdot_;
A1PnC/A1StateEstimator.cpp:  sp_->com_pos = robot_->getCoMPosition();
A1PnC/A1StateEstimator.cpp:  sp_->com_vel = robot_->getCoMVelocity();
A1PnC/A1StateEstimator.cpp:  if (data->frfoot_contact) sp_->b_frfoot_contact = 1;
A1PnC/A1StateEstimator.cpp:  else sp_->b_frfoot_contact = 0;
A1PnC/A1StateEstimator.cpp:  if (data->flfoot_contact) sp_->b_flfoot_contact = 1;
A1PnC/A1StateEstimator.cpp:  else sp_->b_flfoot_contact = 0;
A1PnC/A1StateEstimator.cpp:  if (data->rrfoot_contact) sp_->b_rrfoot_contact = 1;
A1PnC/A1StateEstimator.cpp:  else sp_->b_rrfoot_contact = 0;
A1PnC/A1StateEstimator.cpp:  if (data->rlfoot_contact) sp_->b_rlfoot_contact = 1;
A1PnC/A1StateEstimator.cpp:  else sp_->b_rlfoot_contact = 0;
A1PnC/A1Interface.cpp:  sp_->curr_time = running_time_;
A1PnC/A1Interface.cpp:  sp_->phase_copy = control_architecture_->getState();
DracoPnC/DracoTask/CoMz.cpp:              kd_[0] * (vel_des[2] - sp_->est_com_vel[2]);
DracoPnC/DracoTask/CoMxyz.cpp:                kd_[i] * (vel_des[i] - sp_->est_com_vel[i]);
DracoPnC/DracoTask/DCMTask.cpp:  Eigen::VectorXd r_ic = sp_->dcm.head(2);
DracoPnC/DracoTask/DCMTask.cpp:  op_cmd.head(2) = (9.81 / _pos_des[2]) * (sp_->com_pos.head(2) - r_cmp_des);
DracoPnC/DracoTask/DCMTask.cpp:  op_cmd[2] = kp_[2] * (_pos_des[2] - sp_->com_pos[2]) +
DracoPnC/DracoTask/DCMTask.cpp:              kd_[2] * (_vel_des[2] - sp_->est_com_vel[2]);
DracoPnC/DracoStateEstimator.cpp:  sp_->com_pos = robot_->getCoMPosition();
DracoPnC/DracoStateEstimator.cpp:  sp_->com_vel = robot_->getCoMVelocity();
DracoPnC/DracoStateEstimator.cpp:  sp_->dcm_omega = sqrt(9.81 / sp_->com_pos[2]);
DracoPnC/DracoStateEstimator.cpp:  sp_->prev_dcm = sp_->dcm;
DracoPnC/DracoStateEstimator.cpp:  sp_->dcm = robot_->getCoMPosition() + sp_->est_com_vel / sp_->dcm_omega;
DracoPnC/DracoStateEstimator.cpp:  sp_->dcm_vel =
DracoPnC/DracoStateEstimator.cpp:      alpha_vel * ((sp_->dcm - sp_->prev_dcm) / DracoAux::servo_rate) +
DracoPnC/DracoStateEstimator.cpp:      (1.0 - alpha_vel) * sp_->dcm_vel;
DracoPnC/DracoStateEstimator.cpp:  sp_->r_vrp = sp_->dcm - (sp_->dcm_vel / sp_->dcm_omega);
DracoPnC/DracoStateEstimator.cpp:  ((AverageFilter*)x_vel_est_)->initialization(sp_->com_vel[0]);
DracoPnC/DracoStateEstimator.cpp:  ((AverageFilter*)y_vel_est_)->initialization(sp_->com_vel[1]);
DracoPnC/DracoStateEstimator.cpp:  ((AverageFilter*)z_vel_est_)->initialization(sp_->com_vel[2]);
DracoPnC/DracoStateEstimator.cpp:  sp_->saveCurrentData();
DracoPnC/DracoStateEstimator.cpp:  if ((sp_->phase_copy == 2) && (!visit_once)) {
DracoPnC/DracoStateEstimator.cpp:    ((AverageFilter*)x_vel_est_)->initialization(sp_->com_vel[0]);
DracoPnC/DracoStateEstimator.cpp:    ((AverageFilter*)y_vel_est_)->initialization(sp_->com_vel[1]);
DracoPnC/DracoStateEstimator.cpp:    ((AverageFilter*)z_vel_est_)->initialization(sp_->com_vel[2]);
DracoPnC/DracoStateEstimator.cpp:  x_vel_est_->input(sp_->com_vel[0]);
DracoPnC/DracoStateEstimator.cpp:  sp_->est_com_vel[0] = x_vel_est_->output();
DracoPnC/DracoStateEstimator.cpp:  y_vel_est_->input(sp_->com_vel[1]);
DracoPnC/DracoStateEstimator.cpp:  sp_->est_com_vel[1] = y_vel_est_->output();
DracoPnC/DracoStateEstimator.cpp:  z_vel_est_->input(sp_->com_vel[2]);
DracoPnC/DracoStateEstimator.cpp:  sp_->est_com_vel[2] = z_vel_est_->output();
DracoPnC/DracoStateEstimator.cpp:  sp_->saveCurrentData();
DracoPnC/DracoStateEstimator.cpp:  sp_->l_rf = data->lf_wrench;
DracoPnC/DracoStateEstimator.cpp:  sp_->r_rf = data->rf_wrench;
DracoPnC/DracoStateEstimator.cpp:  sp_->rotor_inertia = data->rotor_inertia;
DracoPnC/DracoStateEstimator.cpp:  if (sp_->stance_foot == DracoBodyNode::rFootCenter) {
DracoPnC/DracoStateEstimator.cpp:  if (sp_->stance_foot != sp_->prev_stance_foot) {
DracoPnC/DracoStateEstimator.cpp:    if (sp_->prev_stance_foot == DracoBodyNode::rFootCenter) {
DracoPnC/DracoStateEstimator.cpp:  sp_->q = curr_config_;
DracoPnC/DracoStateEstimator.cpp:  sp_->qdot = curr_qdot_;
DracoPnC/DracoStateEstimator.cpp:  sp_->prev_stance_foot = sp_->stance_foot;
DracoPnC/DracoStateEstimator.cpp:    sp_->b_rfoot_contact = 1;
DracoPnC/DracoStateEstimator.cpp:    sp_->b_rfoot_contact = 0;
DracoPnC/DracoStateEstimator.cpp:    sp_->b_lfoot_contact = 1;
DracoPnC/DracoStateEstimator.cpp:    sp_->b_lfoot_contact = 0;
DracoPnC/DracoInterface.cpp:  sp_->stance_foot = DracoBodyNode::lFootCenter;
DracoPnC/DracoInterface.cpp:  sp_->curr_time = running_time_;
DracoPnC/DracoInterface.cpp:  sp_->phase_copy = control_architecture_->getState();
DracoPnC/DracoCtrl/DracoMainController.cpp:    A_rotor_(i + Draco::n_vdof, i + Draco::n_vdof) += sp_->rotor_inertia[i];
DracoPnC/DracoCtrl/DracoMainController.cpp:  sp_->qddot_cmd = qddot_res;
DracoPnC/DracoCtrl/DracoMainController.cpp:  // sp_->r_rf_front_des[i] = Fr_res[i];
DracoPnC/DracoCtrl/DracoMainController.cpp:  // sp_->r_rf_back_des[i] = Fr_res[i + 3];
DracoPnC/DracoCtrl/DracoMainController.cpp:  // sp_->l_rf_front_des[i] = Fr_res[i + 6];
DracoPnC/DracoCtrl/DracoMainController.cpp:  // sp_->l_rf_back_des[i] = Fr_res[i + 9];
DracoPnC/DracoCtrl/DracoMainController.cpp:    sp_->r_rf_des[i] = Fr_res[i];
DracoPnC/DracoCtrl/DracoMainController.cpp:    sp_->l_rf_des[i] = Fr_res[i + 6];
DracoPnC/DracoCtrl/DracoMainController.cpp:        des_jacc_, sp_->qdot.segment(Draco::n_vdof, Draco::n_adof),
DracoPnC/DracoCtrl/DracoMainController.cpp:        sp_->q.segment(Draco::n_vdof, Draco::n_adof), des_jvel_, des_jpos_);
DracoPnC/DracoCtrl/DracoMainController.cpp:    des_jpos_ = sp_->q.segment(Draco::n_vdof, Draco::n_adof);
DracoPnC/DracoCtrl/DracoMainController.cpp:    des_jvel_ = sp_->qdot.segment(Draco::n_vdof, Draco::n_adof);
DracoPnC/DracoCtrl/DracoMainController.cpp:  Eigen::VectorXd jpos_ini = sp_->q.segment(Draco::n_vdof, Draco::n_adof);
DracoPnC/DracoStateMachine/ContactTransitionStart.cpp:  ctrl_start_time_ = sp_->curr_time;
DracoPnC/DracoStateMachine/ContactTransitionStart.cpp:          t_walk_start, transfer_type, base_ori, sp_->dcm, sp_->dcm_vel);
DracoPnC/DracoStateMachine/ContactTransitionStart.cpp:        std::to_string(sp_->planning_id));
DracoPnC/DracoStateMachine/ContactTransitionStart.cpp:    sp_->planning_id += 1;
DracoPnC/DracoStateMachine/ContactTransitionStart.cpp:  ctrl_arch_->dcm_trajectory_manager_->updateDCMTasksDesired(sp_->curr_time);
DracoPnC/DracoStateMachine/ContactTransitionStart.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
DracoPnC/DracoStateMachine/ContactTransitionStart.cpp:      sp_->stance_foot = DracoBodyNode::rFootCenter;
DracoPnC/DracoStateMachine/ContactTransitionStart.cpp:      sp_->stance_foot = DracoBodyNode::lFootCenter;
DracoPnC/DracoStateMachine/DoubleSupportBalance.cpp:  ctrl_start_time_ = sp_->curr_time;
DracoPnC/DracoStateMachine/DoubleSupportBalance.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
DracoPnC/DracoStateMachine/DoubleSupportStand.cpp:  ctrl_start_time_ = sp_->curr_time;
DracoPnC/DracoStateMachine/DoubleSupportStand.cpp:      ->initializeFloatingBaseTrajectory(sp_->curr_time, end_time_,
DracoPnC/DracoStateMachine/DoubleSupportStand.cpp:      sp_->curr_time);
DracoPnC/DracoStateMachine/DoubleSupportStand.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
DracoPnC/DracoStateMachine/SwingControl.cpp:  ctrl_start_time_ = sp_->curr_time;
DracoPnC/DracoStateMachine/SwingControl.cpp:  ctrl_arch_->dcm_trajectory_manager_->updateDCMTasksDesired(sp_->curr_time);
DracoPnC/DracoStateMachine/SwingControl.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
DracoPnC/DracoStateMachine/SwingControl.cpp:        if (fabs(sp_->l_rf[5]) >= early_contact_force_threshold_) {
DracoPnC/DracoStateMachine/SwingControl.cpp:          myUtils::pretty_print(sp_->l_rf, std::cout, "Left Wrench");
DracoPnC/DracoStateMachine/SwingControl.cpp:        if (fabs(sp_->r_rf[5]) >= early_contact_force_threshold_) {
DracoPnC/DracoStateMachine/SwingControl.cpp:          myUtils::pretty_print(sp_->r_rf, std::cout, "Right Wrench");
DracoPnC/DracoStateMachine/SwingControl.cpp:// if (sp_->b_lfoot_contact == 1) {
DracoPnC/DracoStateMachine/SwingControl.cpp:// if (sp_->b_rfoot_contact == 1) {
DracoPnC/DracoStateMachine/ContactTransitionEnd.cpp:  ctrl_start_time_ = sp_->curr_time;
DracoPnC/DracoStateMachine/ContactTransitionEnd.cpp:  ctrl_arch_->dcm_trajectory_manager_->updateDCMTasksDesired(sp_->curr_time);
DracoPnC/DracoStateMachine/ContactTransitionEnd.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
DracoPnC/DracoStateMachine/Initialize.cpp:  ctrl_start_time_ = sp_->curr_time;
DracoPnC/DracoStateMachine/Initialize.cpp:  state_machine_time_ = sp_->curr_time - ctrl_start_time_;
DracoPnC/DracoLogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, amp, freq);
DracoPnC/DracoLogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
DracoPnC/DracoLogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
DracoPnC/DracoLogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
DracoPnC/DracoLogicInterrupt/WalkingInterruptLogic.cpp:          sp_->curr_time, 4.0, dis);
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:          sp_->curr_time);
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:      if ((sp_->curr_time >=
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:      sp_->prev_trq_cmd[i] = ((DracoCommand*)_cmd)->jtrq[i];
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:          sp_->prev_trq_cmd[i], ((DracoCommand*)_cmd)->jtrq[i], rat);
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  des_jpos = sp_->q.tail(Draco::n_adof);
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  des_jvel = sp_->qdot.tail(Draco::n_adof);
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->w_rfoot_pos = rfoot_pos_hierarchy_manager_->current_w_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->w_rfoot_ori = rfoot_ori_hierarchy_manager_->current_w_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->w_lfoot_pos = lfoot_pos_hierarchy_manager_->current_w_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->w_lfoot_ori = lfoot_ori_hierarchy_manager_->current_w_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->w_com = com_hierarchy_manager_->current_w_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->w_base_ori = base_ori_hierarchy_manager_->current_w_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  /*  sp_->w_rf_rffront =*/
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  // sp_->w_rf_rfback =
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  // sp_->w_rf_lffront =
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  // sp_->w_rf_lfback =
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->w_rfoot_fr =
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->w_lfoot_fr =
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->rfoot_center_pos_des = rfoot_trajectory_manager_->foot_pos_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->rfoot_center_vel_des = rfoot_trajectory_manager_->foot_vel_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->lfoot_center_pos_des = lfoot_trajectory_manager_->foot_pos_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->lfoot_center_vel_des = lfoot_trajectory_manager_->foot_vel_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->rfoot_center_quat_des = rfoot_trajectory_manager_->foot_quat_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->rfoot_center_so3_des = rfoot_trajectory_manager_->foot_ang_vel_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->lfoot_center_quat_des = lfoot_trajectory_manager_->foot_quat_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->lfoot_center_so3_des = lfoot_trajectory_manager_->foot_ang_vel_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->q_task_des = joint_trajectory_manager_->joint_pos_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->qdot_task_des = joint_trajectory_manager_->joint_vel_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->q_task = sp_->q.tail(Draco::n_adof);
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:  sp_->qdot_task = sp_->qdot.tail(Draco::n_adof);
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->com_pos_des = floating_base_lifting_up_manager_->com_pos_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->com_vel_des = floating_base_lifting_up_manager_->com_vel_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->dcm_des = floating_base_lifting_up_manager_->dcm_pos_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->dcm_vel_des = floating_base_lifting_up_manager_->dcm_vel_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->base_quat_des = floating_base_lifting_up_manager_->base_ori_quat_des_;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->base_ang_vel_des =
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->com_pos_des = dcm_trajectory_manager_->des_com_pos;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->com_vel_des = dcm_trajectory_manager_->des_com_vel;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->base_quat_des = dcm_trajectory_manager_->des_quat;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->base_ang_vel_des = dcm_trajectory_manager_->des_ang_vel;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->dcm_des = dcm_trajectory_manager_->des_dcm;
DracoPnC/DracoCtrlArchitecture/DracoCtrlArchitecture.cpp:    sp_->dcm_vel_des = dcm_trajectory_manager_->des_dcm_vel;
